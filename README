tinybc(1)                    Tiny BASIC for Curses                   tinybc(1)



NAME
       tinybc - Tiny BASIC for Curses

       tinybc [OPTIONS][FILE]


DESCRIPTION
       tinybc  is a BASIC interpreter for the curses character screen handling
       library, which fully corresponds to the Tiny BASIC specification.

       The tinybc engine is thread-safe and can be embedded into  other  code.
       Embedding  may not make sense because of the capabilities of the inter-
       preter, but it makes sense because the code is easily extendable.

       It's just an idea i got and quickly implemented, BASIC is  not  a  pro-
       gramming  language  which  i  use. I made it for fun and i hope that it
       would be used for fun, such as a minimalist challenge.


Curses
       Curses is a library for using computer  interactively  in  a  character
       mode. It corresponds to the POSIX standard, and is the most cross-plat-
       form solution for that purpose. Character mode is the easiest to  code,
       so  it  is  the easiest to feel the computer that way. Terminals of the
       modern computers provide almost the same "graphics"  as  some  earliest
       microcomputers, and there are many games with such graphics.


Tiny BASIC
       Tiny  BASIC  is  the  specification of the most minimal BASIC. In fact,
       there is not much to choose from, because the next smallest  specifica-
       tion  is  the  Small  BASIC standard, and this does not provide a small
       language at all. The Tiny BASIC specification  was  written  by  Dennis
       Allison  and  was published in the People's Computer Company newsletter
       in December 1975. The specification was necessary because of  the  need
       to  have  a  small  interpreter which can fit into 2 KB of memory. Tiny
       BASIC was one of the first programming languages for  the  microcomput-
       ers.

       Tiny  BASIC  is  strikingly  minimal.  This  interpreter is minimal not
       because it was difficult to add more functionality, adding  functional-
       ity  is  surprisingly simple. This interpreter is minimal because it is
       meant to implement Tiny BASIC. But i think that minimalism enables cre-
       atity.

       This  interpreter  is  mostly  based  on  the Tom Pittman's Tiny BASIC,
       except the USR function, using full expressions for  input,  and  vari-
       ables  are 32 bits long. The Tom Pittman's Tiny BASIC is implemented so
       completely that the programs written for it run without  modifications.
       The  computed GOTO and GOSUB are implemented too, but their expressions
       would be renumbered when they only consist of a single number.


OPTIONS
       -i     Starts the interpreter interactively.

       -number
              Renumbers the program starting from number.


INSTALL
       To compile tinybc in Linux, type  make  in  the  terminal.  To  compile
       tinybc in Windows, type one of the following depending on your system:

       mingw32-make tinybc.exe

       make tinybc.exe

       The  binaries  for  Linux  and  Windows  are  provided,  but because of
       viruses, etc, it's safer to compile. The program depends only  on  some
       version  of  the  curses  library.  For compiling in Linux, the ncurses
       development package has to be installed. In Windows, the compiler  such
       as  MinGW  has to be installed. If install MinGW, add its bin directory
       to the path. The PDCurses library for Windows is included in  the  dis-
       tribution.

       In the Windows versions starting from Vista, it is possible to open the
       console (terminal) from Windows Explorer in the browsed  directory,  by
       right  clicking  on that directory when holding down the shift key, and
       then choosing "Open Command Prompt Here". In the older versions,  with-
       out changing the registry, the best way is to run cmd and copy the path
       from the file properties.


LANGUAGE DESCRIPTION
       The language consists of Tiny BASIC and of statements which were  added
       for curses operations.


Program statements
       In  statements,  all  lines  must begin with a number. It is not always
       necessary though that the numbers are different or in a growing  order.
       The  line  numbers  are  required  because  Tiny BASIC is a traditional
       BASIC. The lines can also be renumbered. See the  examples  (the  files
       with  the bas extension). The LET and THEN keywords can be omitted, the
       PRINT keyword can be abbreviated as PR.


       CLS    Clears the screen

       COLOR expr1, expr2
              Changes the foreground color to expr1 and  background  color  to
              expr2

       END    Ends  the  execution of the program, can be anywhere in the pro-
              gram

       GOSUB expr
              Executes a subroutine which starts with the number which is  the
              value of the expression, subroutine ends with return

       GOTO expr
              Executes  the  line  with  the  number which is the value of the
              expression

       IF relation THEN statement
              Executes statement if the relation is true

       INCHAR variable
              Writes the code of the character at the  current  position  into
              the variable

       INPUT variable1, ... variablen
              Inputs variables

       INKEY variable
              Inputs a key code, -1 if no keys pressed

       LET variable = expr
              Assigns an expression to variable

       LOCATE expr1, expr2
              Cursor  to line expr1 and column expr2, the next PRINT prints to
              that location

       NAP expr
              Sleeps the expr of milliseconds, at least NAP 10 must be in  the
              main loop to give time for the operating system

       PRINT expr1, .... exprn
              Prints the expressions, ; allowed

       REM comment
              Any text can be written after rem as a comment

       RETURN Ends  the subroutine block and executes the line after the call-
              ing GOSUB statement


Interactive mode
       In the interactive mode you can both edit and run the program. Interac-
       tive  mode  is  a part of the Tiny BASIC specification, so it has to be
       implemented in every language which is said to be Tiny BASIC. The  HELP
       statement  is  added. SAVE is also an additional statement which is not
       in the Tiny BASIC specification. Because in the early  computers,  they
       used teletypes as terminals, and so there was no difference whether the
       input or ouput was done with a typewriter, or with a punched tape.

       As it is the tradition of BASIC, the first  character  can  be  written
       instead  of  the  full  keyword. The line edit is exactly as in the Tom
       Pittman's tiny basic, backspace deletes the last character  and  ctrl-x
       deletes the entire input line.

       When  you write a line which starts with a number, then this is consid-
       ered to be a program line and it will be added to  to  program  to  the
       appropriate  place. When the number is the number of an existing state-
       ment, then this statement will be replaced with the statement which you
       entered. If the line consists only of a number with no additional text,
       then the statement with that number will be deleted.


       CLEAR  Deletes the program

       LIST   Lists the whole program

       LIST line
              Lists the line

       LIST line1-line2
              Lists program from line1 to line2

       QUIT   Exits

       RUN    Runs the program

       SAVE filename
              Saves the program

       HELP   Prints help


Variables
       There are 26 variables, the names of which are the upper  case  letters
       A--Z. Variables are integers, but these are quite long integers with up
       to 10 decimal places. This  enables  to  do  real  number  calculations
       assuming that the point is somewhere in the middle of the number.


Expressions
       The order of calculations is natural (multiplications, etc. first).

       One function, RND(expr) , can be used in expression. This function gen-
       erates a random number. Example: assign to the variable n a random num-
       ber in the range 1 to 10:

       10 n = RND(10) + 1

       Expressions  can  contain  variables, numbers, and the following opera-
       tors:


       +      Addition

       -      Subtraction

       *      Multiplication

       /      Division

       ()     Parentheses, the expression in parentheses is calculated first


Relations
       The elements of a relation are expressions. The relation operators  are
       the following:


       <      Less

       <=     Less or equal

       >      Greater

       >=     Greater or equal

       =      Equal

       <>     Not equal


Colors
       Most  terminals  support  8  colors,  so currently 8 colors are allowed
       (colors 0--7). The combination of foreground and background color  pro-
       vided  in  the  color  statement  is called a color pair. The number of
       color pairs is restricted and the maximum number depends on your termi-
       nal. For example my terminal allows 64 color pairs. When you try to use
       one color combination more than your terminal allows,  the  color  will
       not change. The curses colors are not the best possible and they can be
       re-defined in the code, but the curses colors  are  the  only  standard
       colors, so currently the colors are the original curses colors.


Strings
       You  have  to set your terminal encoding to IBM850, which is the MS-DOS
       encoding, to be able to print the pseudographics characters. The expla-
       nation  why  it  is implemented like that is rather technical. You  can
       print ASCII characters in any encoding.

       Use escape sequences to enter characters which cannot be  entered  with
       keyboard.  These  escape  sequences  are in the format which is used in
       several programming languages for adding  some  characters  to  string.
       This format is \x followed by two digit hexadecimal code of the charac-
       ter.

       The following example shows how to use escape sequences in a string  in
       the print statement:

       70 PRINT "The character \xdf is the upper pixel"

       Make  sure that you provide at least NAP 10 after a print statement, or
       if you use locate, after locate statement, in a bigger  loop.  To  make
       sure  that  the  previous graphics operation is finished, otherwise the
       output may be weird.


Running
       The Tiny BASIC programs can run both in the interactive mode  and  from
       the  command  line.  Because programs which use Curses can write every-
       where on the screen, the screen is cleared when the program terminates.
       Therefore remember to press any key when the program is finished, to go
       back to command line. This enables to always see the result of the pro-
       gram.

       When  the  program asks for input, one can enter both numbers and vari-
       able names. In case of variable  the  names,  the  corresponding  input
       would be the value of the variable.

       If your program provides no way to exit normally, ctrl-c should do that
       harmlessly to the operating system and to the terminal (but not to your
       BASIC  program).  In  Windows,  the key for interrupting the program is
       ctrl-break, the break key is a key in the upper  right  corner  of  the
       keyboard, with "Pause" written on it.

       Input  and output redirection works with Curses, also it is possible to
       copy from the terminal and paste to the terminal.


Troubleshooting
       If the program exits unnormally, like when  you  happen  to  divide  by
       zero,  it  may  happen that your terminal settings would be changed. It
       depends on your terminal how to restore the default settings. Running a
       tinybc  program  that  exits  normally can restore the settings. But if
       nothing else helps, closing the terminal  and  running  it  again  will
       always restore the settings, as running tinybc does not change anything
       permanently.

       The debug mode can be switched on by defining the DEBUG symbol in Make-
       file and compiling. When the debug mode is on, the debug messages would
       be written to a log file. This information is verbous though, so  avoid
       too much looping when debugging.


LICENSE
       LGPL


AUTHOR
       Tarvo Korrovite


BUGS
       Send to tkorrovi@mail.com



                               October 10, 2011                      tinybc(1)
